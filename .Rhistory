install.packages("tidy")
install.packages("tidyverse")
install.packages("rmarkdown")
library(devtools)
install.packages("DLL")
install.packages(c("broom", "cachem", "callr", "cli", "cpp11", "data.table", "desc", "DHARMa", "diffobj", "dplyr", "farver", "gert", "ggsignif", "isoband", "lifecycle", "lubridate", "maptools", "MatrixModels", "mime", "pbkrtest", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rio", "rmarkdown", "rstatix", "rvest", "sfsmisc", "SparseM", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "xfun", "zoo"))
install.packages(c("broom", "cachem", "callr", "cli", "cpp11", "data.table", "desc", "DHARMa", "diffobj", "dplyr", "farver", "gert", "ggsignif", "isoband", "lifecycle", "lubridate", "maptools", "MatrixModels", "mime", "pbkrtest", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rio", "rmarkdown", "rstatix", "rvest", "sfsmisc", "SparseM", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "xfun", "zoo"))
install.packages(c("broom", "cachem", "callr", "cli", "cpp11", "data.table", "desc", "DHARMa", "diffobj", "dplyr", "farver", "gert", "ggsignif", "isoband", "lifecycle", "lubridate", "maptools", "MatrixModels", "mime", "pbkrtest", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rio", "rmarkdown", "rstatix", "rvest", "sfsmisc", "SparseM", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "xfun", "zoo"))
install.packages(c("broom", "cachem", "callr", "cli", "cpp11", "data.table", "desc", "DHARMa", "diffobj", "dplyr", "farver", "gert", "ggsignif", "isoband", "lifecycle", "lubridate", "maptools", "MatrixModels", "mime", "pbkrtest", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rio", "rmarkdown", "rstatix", "rvest", "sfsmisc", "SparseM", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "xfun", "zoo"))
install.packages(c("broom", "cachem", "callr", "cli", "cpp11", "data.table", "desc", "DHARMa", "diffobj", "dplyr", "farver", "gert", "ggsignif", "isoband", "lifecycle", "lubridate", "maptools", "MatrixModels", "mime", "pbkrtest", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rio", "rmarkdown", "rstatix", "rvest", "sfsmisc", "SparseM", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "xfun", "zoo"))
install.packages(c("broom", "cachem", "callr", "cli", "cpp11", "data.table", "desc", "DHARMa", "diffobj", "dplyr", "farver", "gert", "ggsignif", "isoband", "lifecycle", "lubridate", "maptools", "MatrixModels", "mime", "pbkrtest", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rio", "rmarkdown", "rstatix", "rvest", "sfsmisc", "SparseM", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "xfun", "zoo"))
install.packages(c("broom", "cachem", "callr", "cli", "cpp11", "data.table", "desc", "DHARMa", "diffobj", "dplyr", "farver", "gert", "ggsignif", "isoband", "lifecycle", "lubridate", "maptools", "MatrixModels", "mime", "pbkrtest", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rio", "rmarkdown", "rstatix", "rvest", "sfsmisc", "SparseM", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "xfun", "zoo"))
install.packages(c("broom", "cachem", "callr", "cli", "cpp11", "data.table", "desc", "DHARMa", "diffobj", "dplyr", "farver", "gert", "ggsignif", "isoband", "lifecycle", "lubridate", "maptools", "MatrixModels", "mime", "pbkrtest", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rio", "rmarkdown", "rstatix", "rvest", "sfsmisc", "SparseM", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "xfun", "zoo"))
install.packages(c("broom", "cachem", "callr", "cli", "cpp11", "data.table", "desc", "DHARMa", "diffobj", "dplyr", "farver", "gert", "ggsignif", "isoband", "lifecycle", "lubridate", "maptools", "MatrixModels", "mime", "pbkrtest", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rio", "rmarkdown", "rstatix", "rvest", "sfsmisc", "SparseM", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "xfun", "zoo"))
install.packages(c("broom", "cachem", "callr", "cli", "cpp11", "data.table", "desc", "DHARMa", "diffobj", "dplyr", "farver", "gert", "ggsignif", "isoband", "lifecycle", "lubridate", "maptools", "MatrixModels", "mime", "pbkrtest", "pillar", "pkgload", "processx", "promises", "ps", "quantreg", "rio", "rmarkdown", "rstatix", "rvest", "sfsmisc", "SparseM", "testthat", "tibble", "tidyr", "tinytex", "utf8", "vctrs", "waldo", "xfun", "zoo"))
detach("package:base", unload = TRUE)
library(base)
detach("package:methods", unload = TRUE)
library(methods)
install.packages("Tidyverse")
setwd("~/Documents/GitHub/LabellingPaperData2020")
all.data.raw=read.csv(file = 'clean_data/Exp2b_Tseltal_add_clean.csv',header=T)
all.data.raw2=read.csv(file = 'clean_data/Exp2b_Tseltal_affect_clean.csv',header=T)
View(all.data.raw)
all.data <- merge(x = all.data.raw, y = all.data.raw2,
by = c("ID", "recording", "part"))
all.data$recording<-factor(all.data$recording)
all.data$participant<-factor(all.data$participant)
all.data$participant2<-factor(all.data$participant2)
all.data$ID<-factor(all.data$ID)
all.data$nat_inf_label<-factor(all.data$nat_inf_label)
all.data$rater_label<-factor(all.data$rater_label)
# Label accuracy
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="A"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="T"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="C"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="A"] <- 0
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="T"] <- 0
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="C"] <- 0
# collapse C and T in Native Informer label
all.data$nat_inf_label_TisC[all.data$nat_inf_label=="A"] <- "A"
all.data$nat_inf_label_TisC[all.data$nat_inf_label=="C"] <- "C"
all.data$nat_inf_label_TisC[all.data$nat_inf_label=="T"] <- "C"
all.data$nat_inf_label_TisC <- factor(all.data$nat_inf_label_TisC)
mean(all.data$accuracy)
theme_set(theme_pubr())
# call in the data
all.data.raw=read.csv(file = 'clean_data/Exp2a_Tseltal_clean.csv',header=T)
all.data<-subset(all.data.raw, rater_label != 'junk')
View(all.data)
all.data$speaker <- 0
fa.samples <- which(grepl('FA^', all.data$block))
all.data$speaker[fa.samples] <- "turn-taking"
all.data$speaker <- 0
fa.samples <- which(grepl('^FA', all.data$block))
all.data$speaker[fa.samples] <- 1
all.data.raw=read.csv(file = 'clean_data/Exp2a_Tseltal_clean.csv',header=T)
all.data<-subset(all.data.raw, rater_label != 'junk')
fa.samples <- which(grepl('^FA', all.data$block))
all.data$speaker[fa.samples] <- 1
all.data$speaker <- 0
fa.samples <- which(grepl('^FA', all.data$block))
all.data$speaker[fa.samples] <- 1
# Use this script for the Exp 2a Tseltal Dataset
library(dplyr)
library(tidyr)
library(ggpubr)
library(ggplot2)
library(lme4)
library(lmerTest)
theme_set(theme_pubr())
# call in the data
all.data.raw=read.csv(file = 'clean_data/Exp2a_Tseltal_clean.csv',header=T)
all.data.all<-subset(all.data.raw, rater_label != 'junk')
#remove all non-Female adult speakers
all.data.all$speaker <- 0
fa.samples <- which(grepl('^FA', all.data.all$block))
all.data.all$speaker[fa.samples] <- 1
all.data.<-subset(all.data.all, speaker == 1)
all.data$recording<-factor(all.data$recording)
all.data$participant<-factor(all.data$participant)
all.data$nat_inf_label<-factor(all.data$nat_inf_label)
all.data$rater_label<-factor(all.data$rater_label)
# Label accuracy
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="A"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="T"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="C"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="A"] <- 0
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="T"] <- 0
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="C"] <- 0
# removes the 2 cases mmissing a response
all.data <- all.data %>% drop_na()
all.data.raw=read.csv(file = 'clean_data/Exp2a_Tseltal_clean.csv',header=T)
all.data.all<-subset(all.data.raw, rater_label != 'junk')
#remove all non-Female adult speakers
all.data.all$speaker <- 0
fa.samples <- which(grepl('^FA', all.data.all$block))
all.data.all$speaker[fa.samples] <- 1
all.data<-subset(all.data.all, speaker == 1)
# sets variables as factors
all.data$recording<-factor(all.data$recording)
all.data$participant<-factor(all.data$participant)
all.data$nat_inf_label<-factor(all.data$nat_inf_label)
all.data$rater_label<-factor(all.data$rater_label)
# Label accuracy
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="A"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="T"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="C"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="A"] <- 0
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="T"] <- 0
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="C"] <- 0
# removes the 2 cases mmissing a response
all.data <- all.data %>% drop_na()
all.data.raw=read.csv(file = 'clean_data/Exp2a_Tseltal_clean.csv',header=T)
all.data.all<-subset(all.data.raw, rater_label != 'junk')
#remove all non-Female adult speakers
all.data.all$speaker <- 0
fa.samples <- which(grepl('^FA', all.data.all$block))
all.data.all$speaker[fa.samples] <- 1
all.data<-subset(all.data.all, speaker == 1)
# sets variables as factors
all.data$recording<-factor(all.data$recording)
all.data$participant<-factor(all.data$participant)
all.data$nat_inf_label<-factor(all.data$nat_inf_label)
all.data$rater_label<-factor(all.data$rater_label)
# Label accuracy
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="A"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="T"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="C"] <- 1
all.data$accuracy[all.data$rater_label=="cds" &
all.data$nat_inf_label=="A"] <- 0
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="T"] <- 0
all.data$accuracy[all.data$rater_label=="ads" &
all.data$nat_inf_label=="C"] <- 0
all.data <- all.data %>% drop_na()
acc.count.num <- all.data %>%
group_by(accuracy) %>%
summarise(counts = n())
acc.count.num
all.data$nat_inf_label_TisC[all.data$nat_inf_label=="A"] <- "A"
all.data$nat_inf_label_TisC[all.data$nat_inf_label=="C"] <- "C"
all.data$nat_inf_label_TisC[all.data$nat_inf_label=="T"] <- "C"
all.data$nat_inf_label_TisC <- factor(all.data$nat_inf_label_TisC)
# confidence variable
con.count<-ggplot(all.data, aes(confidence)) +
geom_bar(fill = "#0073C2FF") +
theme_pubclean()
con.count
con.count.num <- all.data %>%
group_by(confidence) %>%
summarise(counts = n())
con.count.num
############demographics and analyses
# Accuracy means by group
mean(all.data$accuracy)
# C and T are collapsed
acc.means.TisC<-all.data %>%
group_by(nat_inf_label_TisC) %>%
summarise_at(vars(accuracy), list(name = mean))
acc.means.TisC
con.means<-all.data %>%
group_by(nat_inf_label_TisC) %>%
summarise_at(vars(confidence), list(name = mean))
con.means
# Breaks out C and T
acc.means<-all.data %>%
group_by(nat_inf_label) %>%
summarise_at(vars(accuracy), list(name = mean))
acc.means
con.means<-all.data %>%
group_by(nat_inf_label) %>%
summarise_at(vars(confidence), list(name = mean))
con.means
accuracy.TisC.model<-glmer(accuracy~1+nat_inf_label_TisC+
confidence +
(1|participant)+(1|recording),
data = all.data,
family = binomial (link = 'logit'))
summary(accuracy.TisC.model)
accuracy.model<-glmer(accuracy~1+nat_inf_label+
confidence +
(1|participant)+(1|recording),
data = all.data,
family = binomial (link = 'logit'))
summary(accuracy.model)
all.data.raw=read.csv(file = 'clean_data/Exp2b_Tseltal_add_clean.csv',header=T)
all.data.raw2=read.csv(file = 'clean_data/Exp2b_Tseltal_affect_clean.csv',header=T)
View(all.data.raw)
